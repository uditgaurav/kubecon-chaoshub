kind: Workflow
apiVersion: argoproj.io/v1alpha1
metadata:
  name: boutique-cart-network-latency-1681798581
  namespace: litmus
  creationTimestamp: null
  labels:
    cluster_id: c0b2202d-cfb3-425b-9c42-6d344c026b76
    subject: boutique-cart-network-latency_litmus
    workflow_id: a86a03a2-3847-43aa-9161-32eeca0ace87
    workflows.argoproj.io/controller-instanceid: c0b2202d-cfb3-425b-9c42-6d344c026b76
spec:
  templates:
    - name: custom-chaos
      inputs: {}
      outputs: {}
      metadata: {}
      steps:
        - - name: install-chaos-experiments
            template: install-chaos-experiments
            arguments: {}
        - - name: pod-network-latency-pq0
            template: pod-network-latency-pq0
            arguments: {}
    - name: install-chaos-experiments
      inputs:
        artifacts:
          - name: pod-network-latency-pq0
            path: /tmp/pod-network-latency-pq0.yaml
            raw:
              data: >
                apiVersion: litmuschaos.io/v1alpha1

                description:
                  message: |
                    Injects network latency on pods belonging to an app deployment
                kind: ChaosExperiment

                metadata:
                  name: pod-network-latency
                  labels:
                    name: pod-network-latency
                    app.kubernetes.io/part-of: litmus
                    app.kubernetes.io/component: chaosexperiment
                    app.kubernetes.io/version: 3.0.0-beta3
                spec:
                  definition:
                    scope: Namespaced
                    permissions:
                      - apiGroups:
                          - ""
                        resources:
                          - pods
                        verbs:
                          - create
                          - delete
                          - get
                          - list
                          - patch
                          - update
                          - deletecollection
                      - apiGroups:
                          - ""
                        resources:
                          - events
                        verbs:
                          - create
                          - get
                          - list
                          - patch
                          - update
                      - apiGroups:
                          - ""
                        resources:
                          - configmaps
                        verbs:
                          - get
                          - list
                      - apiGroups:
                          - ""
                        resources:
                          - pods/log
                        verbs:
                          - get
                          - list
                          - watch
                      - apiGroups:
                          - ""
                        resources:
                          - pods/exec
                        verbs:
                          - get
                          - list
                          - create
                      - apiGroups:
                          - apps
                        resources:
                          - deployments
                          - statefulsets
                          - replicasets
                          - daemonsets
                        verbs:
                          - list
                          - get
                      - apiGroups:
                          - apps.openshift.io
                        resources:
                          - deploymentconfigs
                        verbs:
                          - list
                          - get
                      - apiGroups:
                          - ""
                        resources:
                          - replicationcontrollers
                        verbs:
                          - get
                          - list
                      - apiGroups:
                          - argoproj.io
                        resources:
                          - rollouts
                        verbs:
                          - list
                          - get
                      - apiGroups:
                          - batch
                        resources:
                          - jobs
                        verbs:
                          - create
                          - list
                          - get
                          - delete
                          - deletecollection
                      - apiGroups:
                          - litmuschaos.io
                        resources:
                          - chaosengines
                          - chaosexperiments
                          - chaosresults
                        verbs:
                          - create
                          - list
                          - get
                          - patch
                          - update
                          - delete
                    image: litmuschaos/go-runner:3.0.0-beta3
                    imagePullPolicy: Always
                    args:
                      - -c
                      - ./experiments -name pod-network-latency
                    command:
                      - /bin/bash
                    env:
                      - name: TARGET_CONTAINER
                        value: ""
                      - name: NETWORK_INTERFACE
                        value: eth0
                      - name: LIB_IMAGE
                        value: litmuschaos/go-runner:3.0.0-beta3
                      - name: TC_IMAGE
                        value: gaiadocker/iproute2
                      - name: NETWORK_LATENCY
                        value: "2000"
                      - name: TOTAL_CHAOS_DURATION
                        value: "60"
                      - name: RAMP_TIME
                        value: ""
                      - name: JITTER
                        value: "0"
                      - name: PODS_AFFECTED_PERC
                        value: ""
                      - name: TARGET_PODS
                        value: ""
                      - name: CONTAINER_RUNTIME
                        value: docker
                      - name: DESTINATION_IPS
                        value: ""
                      - name: DESTINATION_HOSTS
                        value: ""
                      - name: SOCKET_PATH
                        value: /var/run/docker.sock
                      - name: NODE_LABEL
                        value: ""
                      - name: SEQUENCE
                        value: parallel
                    labels:
                      name: pod-network-latency
                      app.kubernetes.io/part-of: litmus
                      app.kubernetes.io/component: experiment-job
                      app.kubernetes.io/runtime-api-usage: "true"
                      app.kubernetes.io/version: 3.0.0-beta3
      outputs: {}
      metadata: {}
      container:
        name: ""
        image: litmuschaos/k8s:3.0.0-beta3
        command:
          - sh
          - -c
        args:
          - kubectl apply -f /tmp/pod-network-latency-pq0.yaml -n
            {{workflow.parameters.adminModeNamespace}} &&  sleep 30
        resources: {}
    - name: pod-network-latency-pq0
      inputs:
        artifacts:
          - name: pod-network-latency-pq0
            path: /tmp/chaosengine-pod-network-latency-pq0.yaml
            raw:
              data: >
                apiVersion: litmuschaos.io/v1alpha1

                kind: ChaosEngine

                metadata:
                  namespace: "{{workflow.parameters.adminModeNamespace}}"
                  generateName: pod-network-latency-pq0
                  labels:
                    workflow_run_id: "{{workflow.uid}}"
                spec:
                  engineState: active
                  appinfo:
                    appns: boutique
                    applabel: app=cartservice
                    appkind: deployment
                  chaosServiceAccount: litmus-admin
                  experiments:
                    - name: pod-network-latency
                      spec:
                        components:
                          env:
                            - name: TOTAL_CHAOS_DURATION
                              value: "60"
                            - name: NETWORK_LATENCY
                              value: "2000"
                            - name: JITTER
                              value: "0"
                            - name: CONTAINER_RUNTIME
                              value: containerd
                            - name: SOCKET_PATH
                              value: /run/containerd/containerd.sock
                            - name: PODS_AFFECTED_PERC
                              value: ""
                        probe:
                          - name: website-latency-check
                            type: promProbe
                            mode: OnChaos
                            runProperties:
                              probeTimeout: 5
                              retry: 2
                              interval: 2
                              probePollingInterval: 1
                              initialDelaySeconds: 1
                              stopOnFailure: false
                            promProbe/inputs:
                              endpoint: http://prometheus-k8s.monitoring.svc.cluster.local:9090
                              query: avg_over_time(probe_duration_seconds{job=\"prometheus-blackbox-exporter\",instance=\"frontend.boutique.svc.cluster.local:80\"}[60s:1s])*1000
                              comparator:
                                type: float
                                criteria: <=
                                value: "100"
                          - name: cart-svc-availability-check
                            type: httpProbe
                            mode: Continuous
                            runProperties:
                              probeTimeout: 2000
                              retry: 4
                              interval: 5
                              probePollingInterval: 2
                              initialDelaySeconds: 1
                              stopOnFailure: false
                            httpProbe/inputs:
                              url: http://frontend.boutique.svc.cluster.local:80/cart
                              insecureSkipVerify: false
                              method:
                                get:
                                  criteria: ==
                                  responseCode: "200"
                          - name: cart-pods-check
                            type: cmdProbe
                            mode: Edge
                            runProperties:
                              probeTimeout: 180
                              retry: 0
                              interval: 1
                              stopOnFailure: true
                            httpProbe/inputs: {}
                            cmdProbe/inputs:
                              command: ./healthcheck -name pod-level
                              source:
                                image: chaosnative/go-runner:3.0.0-saas
                                inheritInputs: true
                              comparator:
                                type: string
                                criteria: contains
                                value: "[P000]"
      outputs: {}
      metadata:
        labels:
          weight: "10"
      container:
        name: ""
        image: litmuschaos/litmus-checker:3.0.0-beta3
        args:
          - -file=/tmp/chaosengine-pod-network-latency-pq0.yaml
          - -saveName=/tmp/engine-name
        resources: {}
  entrypoint: custom-chaos
  arguments:
    parameters:
      - name: adminModeNamespace
        value: litmus
  serviceAccountName: argo-chaos
  securityContext:
    runAsUser: 1000
    runAsNonRoot: true
